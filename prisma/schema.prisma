// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInfo  UserInfo?
  resumes   Resume[]
  sessions  RefreshToken[]

  @@map("User")
}

model UserInfo {
  userInfosId Int      @id @default(autoincrement())
  userId      Int      @unique
  name        String
  role        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

model RefreshToken {
  tokenId   Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("RefreshTokens")
}

model Resume {
  resumeId  Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resumeHistory ResumeHistory[]

  @@map("Resume")
}

model ResumeHistory {
  resumeHistoryId Int      @id @default(autoincrement())
  resumeId        Int
  changedField    String
  oldValue        String
  newValue        String
  changedAt       DateTime @default(now())

  resume Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("ResumeHistory")
}
